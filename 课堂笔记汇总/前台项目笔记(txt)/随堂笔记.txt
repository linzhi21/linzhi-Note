

随堂笔记：


	【今日目标】：
	
		商品详情
		
		① 商品详情组件、路由，点击以后才能够进行跳转
		
		② Vue Router 滚动条 如何进行配置
		
		③ 获取商品详情的数据、需要进行渲染
		
		④ 交互 (放大镜)、选择商品的属性
		
		⑤ 加入购物车
		
		⑥ 加入购物车成功的页面 、购物车 组件、路由
		
		
	【课程详情：对应视频】
	
		
	1. 配置商品详情组件和路由
	
		需要配置路由，params 传参
		
		① 多个商品对应一个路由，多对一的关系，动态路由参数：/detail/:id
		
		② 在配置好路由以后，需要到商品列表中点击商品进行跳转  <router-link />
		
		注意：之前我们将 TypeNav 进行了全局注册，所以需要将 Detail/index.vue 里面的 TypeNav 换成 SphTypeNav
		
		
		
	2. 优化路由
	
		目前 routes 太长了，以后配置很多路由以后，router.js 文件将不好维护
		
		因为里面即包括组件导入、路由配置、路由增强、实例化.......
		
		所以：可以将路由配置抽取成一个单独的文件进行维护 (需要将 routes 暴露出来)
		
			  同时也可以将对路由增强的文件也进行增强 (只是执行文件，不需要配置模块化)
			  
		
		抽离的好处：各个文件各司其职，职能比较单一，
		
		如果以后开发中，如何发现一个文件的做的事情太多了，便可以进行拆分
	
	
	
	3. 滚动条的问题
	
	
		从商品列表跳转到商品详情，发现滚动条并没有滚动到顶部
		
		原因：Vue Router 会帮助我们去记忆滚动的距离
		
		但是咱们的需求是：点击链接跳转到一个新的页面，新页面需要滚动到顶部
			
						   如果是通过浏览器的前进、后退，之前访问到哪里，就停留到哪里
						   
						   
		解决方案：使用 路由给提供的配置项：scrollBehavior() 即可
		
				方法接收 3 个参数： to from 和 savedPosition (只有点击浏览器的前进、后台，才有值，否则就是 null)
				
				在方法内部写 return ，代表需要滚动到哪一个位置
				
				
	
	4. 获取商品详情的数据 (这里不在使用 Vuex)
	
	
		① 查看接口文档  (地址、参数、方式)，如果以后开发中
		
		  切记：没有接口文档，让后端通过微信、叮叮、QQ 等方式发给你，不要口头对
		
		
		② 开始根据接口文档封装 请求 API，封装的 xxx.js 文件是按照模块进行拆分的
		
		  如果没有和当前功能有关的 xxx.js 文件，需要创建一个，如果有，直接写就行
		  
		
		③ 在组件中导入封装好的 api 、调用、处理业务逻辑
		
			导入 api
			
			在 methods 方法中调用 api
			
			处理业务逻辑 
			
			赋值、声明 data
			
			打开页面以后，在钩子函数中调用 methods 里面的方法、获取数据
	
	
	
	5. 如果是网络请求、接口调用 错误，应该怎么进行调试
	
		错误：接口直接报错、返回的数据没有达到自己的预期、没有返回想要的数据......
		
			这些都是和后端联调(联合调试、对接口)
	
	
		① 先找到那个错误的请求 
		
		② 看接口地址、请求方式、请求参数是否和接口文档是一致的！
		
		  请求参数：是否没有处理成后端想要的数据格式、参数key是否正确、是否少参数.....
		  
		③ 如果和接口文档是一致的，基本上就是服务器的问题，如果和后端接口不一致，需要自行修改
		
		  一般 4xx 开发的，绝大部分是前端错误
		  
		  一般 5xx 开头的，绝大部分是后端、服务器错误
		  
		  
		  
	6. 渲染商品详情区域
	
	
		需要删除多余的结构 (可删可不删)
	
		----
	
	
		分类数据给的比较怪异，以后开发中几乎返回的都是数组，
		
		怎么处理呢 ? 因为后端返回的都是 3 级数据，所以我们直接对 3 数据进行遍历即可
		
		----
		
		会存在假错误，如果是对数组进行遍历 v-for 会直接不暴露错误，如果是对象等其他方式，需要使用 v-if 
		
		----
		
		商品的规则区域渲染需要使用双层 for 进行遍历
		
		---
		
		其他区域直接使用数据 + 插值表达式渲染即可
		
		
		
	7. 使用插件实现放大镜功能
	
		插件、库使用套路、流程几乎是一模一样
		
		① 安装
		
		② 插件、库 (结合文档、文档肯定有 install 和 Usage 两个地方教怎么使用)
		
			以组件方式进行使用的，先导入组件、注册组件，进行使用即可 (VuePhotoZoomPro、swiper)
			
			以插件方式使用的，先导入，引入插件 import xxx from 'xxx' ，然后注册使用 Vue.use()  （Vue Router、Vuex）
			
			以按照模块化方式使用的，先导入，import xxx from 'xxx' ，直接使用本身提供的方法即可 (Mock.mock())
			
			
			
			
	8. 使用 swiper 实现放大镜下方图片区域
	
	   注意：样式不要删，因为静态页面原本就是使用 swiper 实现的，有对 swiper 定制化的样式
		
		
		① 删除小圆点指示器的结构
		
		② 删除小圆点指示器的结构的配置项
		
		③ 不需要自动播放，去掉 autoplay属性
		
		④ 去掉 loop 属性，不需要循环展示
		
		⑤ 更改 slidesPerView 为 auto ，spaceBetween 改为 10
		
		
		
		
	9. 商品图片组切换同步到放大镜区域
	
		需要点击图片在 ImageList 中，需要展示图片的组件在 Zoom 中
		
		这两个组件是兄弟组件，兄弟组件之间常用的传值方式;
		
		① 事件总线 ，在这个案例使用事件总线比较简单，选择这种方式
		
		② Vuex
	
	
	
	10. 点击切换商品属性的高亮状态
	
		① 绑定点击事件，需要更改 isChecked 属性值  1 代表选中  0 代表没有选中
		
		② 因为采用了排他思想，
		
		   所以获取当前属性组所有的数据(为了方便将同级的 isChecked 设置为 0)
		   
		   同时需要获取到本身的 id (为了方便将自身的 isChecked 设置为 1)
	
	
	
	11. 购买数量需求和思路分析
	
	
		产品需求：

			①. 必须是正整数，最小是1，最大是200
			②. 若输入小于1，则重置为1
			③. 若输入大于200，则重置为200
			④. 若输入的是其他值，则重置为1
		
		如果判断用户输入的值是否符合产品的需求
		
			在咱们项目中使用【正则】验证用户输入的值是否符合要求。
			
		分析用户输入的值：(正则写法有很多，开发中一般都是百度找一个使用最多的，最严谨的复制到自己项目)

			[1-9] :   1 、9 个位数
			
			[1-9]\d: 11 、99 十位数  10 20 31   [ \d 代表的是 0~ 9 之间的数值]  [1\d{2}  花括号是修饰符，代表可以输入几位]
			
			1\d{2}: 100 ~ 199 百位  100 101  199,  如果不看 200，用户最大输入的是 199 ，最小输入的是 100
			
			200: 200
			
			/^([1-9]|[1-9]\d|1\d{2}|200)$/
			
			
			
	
	12. 限制购买数量
	
	
		① 给输入框添加默认的数据
		
		② 通过 change 事件监听用户输入的值
		
		③ 使用正则验证用户输入的值是否合法
		
			合法： 直接赋值
			
			不合法
			
				> 200 需要将 goodNum = 100
				
				0 @   需要将 goodNum = 1
				
				
				
	13. 通过 加、减按钮控制用户的输入
	
	
		① 给加、减绑定事件，事件和 input 输入框事件是同一个，所以需要定义形参进行区分
		
		② 如果购买数量大于 200，给用户提示
		
		③ 如果购买数量小于 1，给用户提示