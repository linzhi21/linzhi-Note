
	
	早上复习
	
		加入购物车
		
		临时标识
		
		购物车(列表的渲染、控制单个商品的选中、全选、计算总购买数和总价、单个删除、批量删除)
	
	
	今日目标
	
		① 将购物车完结
		
			购物车为空的时候如何处理
			
			更改购物车购买数量 (和详情中加入购物车数量处理方式有区别)
			
			完善更改购物车 (+ 、 -)
	
	
		② element
		
			基础使用
			
			按需加载
			
			弹框
			
			
		③ 完成登录、注册
		
		
	
	课程内容
	
	
	3. 购物车为空的时候如何处理
	
	
		只需要判断购物车数据是否为空即可 + v-if
		
		
		
	4. 处理购物车中的输入框
	
		在输入框中输入购买的数量，并 不是直接将输入的数量同步给服务器，而是需要计算差值，服务器端进行处理
		
		
		假如：目前在购物车中需要购买 1 个商品，但是想购买 10 个，不能直接将 10 发送给服务器
		
			  在服务器的购物车中实际上已经有 1 个数据了，只需要告诉服务器，在加 9 个即可
			  
			  10 - 1 = 9，只需要将差值 9 告诉给服务器，服务器会自动处理 + 1
			  
			  
			  目前购物车中一个商品需要购买 10 个，但是又想改为 5 个
			  
			  只需要告诉服务器，在减去 5 个即可，
			  
			  5 - 10 = -5，将 -5 告诉服务器，服务器会自动处理 -5
			  
			  
			  需要购买的实际数量，比目前购物车中的多，只要将 正数 差值发送给服务器
			  
			  需要购买的实际数量，比目前购物车中的少，只要将 负数 差值发送给服务器
			  
			  只需要将 【实际数量 - 目前购物车数量 = 差值】
			  
			  
			  
	5. 将更新后的购买数量同步给服务器  （输入的值是合法的情况）
	
	
		复用的 【加入购物车】 接口 API
		
		需要对用户输入的值进行验证，只有合法才能够发请求、以及计算差值
		
		
		---------------
		
		因为这里复用的是【加入购物车】 接口 API
		
		为啥之前没有计算差值呀，现在为啥计算
		
		① 如果购物车已有数据，加入一个重复的商品，实际购买数量：加入购物车的数据 20 (这里可以理解为是差值) + 购物车已有的数量 4
		
		② 如果购物车没有有数据，添加商品到购物车的时候，购买多少数量，在购物车中就有多少数据
		
		
		
	5. 将更新后的购买数量同步给服务器  （输入的值是不合法的情况）
	
	
		如果用户输入的购买数量，大于 200，那么让用户最多购买 200
		
		思考：用户输入的值 大于 200 了，就应该让用户购买 200，差值应该怎么运算
		
			目前购买数量是 50
			
			用户输入了     350
			
			应该让用户购买 200
			
			这时候差值计算方式：【不是用户输入的 - 目前购买数量】 而是 【最大购买数量 - 目前购买数量】
			
			
			350 - 50 = 300  ， 300 + 50 = 350 ！ 就不符合产品的需求
			
			200 - 50 = 150  ， 150 + 50 = 200 ！ 符合产品的需求
			
			
		如果用户输入了其他不合法的值：例如 -1，@ ....
		
			之前显示多少条数据，目前还是展示多少条数据
			
			
			
			
	6、购物车-完善电商逻辑
	
		无论当前商品是否勾选，只要修改了数量，就重新勾上 (电商固有的逻辑)
		
		后端已经处理好，前端只需要在更改数据后将 isChecked 设置为 true 即可
		
		
		
	7. 购物车-点按钮修改数量
	
	
		需要获取对谁进行更改：skuId  good.skuId
		
		
		需要哪个数据进行 -1 \ +1: skuNum  good.skuNum  (可以利用、也可以不利用)

			因为传递的是差值
			
			+ 1：只需要将 1 当成参数传递给服务器即可，
			
			- 1 只需要将 -1 当成参数传递给服务器即可，
			
			
		同时需要处理两个极端值 
		
			+ 以后，是否大于 200
			
			- 以后，是否小于 1
			
			
			
		优化：
		
		代码中写了很多 if ... else if ... else  if ... 语句
		
		这种语句阅读性比较差，性能比较差
		
		如果以后写很多 if ... else if ... else  if ...  代码，必须使用 switch ... 优化
		
		
		切记：以后开发中必须进行优化，否则代码会被打回让你重新修改，慎重会辞退 ！！！！
		
		
		if else if else
			
			
			
	8. 购物车- 购物车数量加减的-性能优化
	
	
		频繁的点击 加、 减 按钮，每点击一次， 就会发送一次请求
		
		
		解决方案：
		
			用户每次点击 + 、-
			
			如果这次 + 、- 后，服务器成功的状态没有返回，不让用户进行下一次的 + 、-
			
			只有服务器将成功状态返回了，用户才能够进行下一次的 +、-

		
		落地代码：
		
			isFlag: false
			
			
			第一次点击的时候：
			
				判断 isFlag 是否为 true，
				
				如果是，不让用户发起下次请求
				
				如果不是，就能够进行加减的操作
			
			
			
				在进行加减操作的时候，肯定会发请求，发请求的之前将 isFlag 设置为 true
			
			
			第二次点击了： 
			
				假设 服务器还没有返回结果，isFlag 是 true
				
				如果是，不让用户发起下次请求
				
				如果 服务器返回了数据，将 isFlag 是 false 即可
				
				
				
	9. Element-介绍
	
	   Element、市场面常见的一些 Vue UI 框架
	   
	   
	   Element 目前有两个版本
	   
			Element ui 主要是和 Vue 2 结合使用
		
			Element plus 主要是和 Vue 3 结合使用
		
		
	  为开发者、设计师和产品经理准备的 ?
	  
		产品经理 → 原型图（草稿图）   → 根据某一种风格设计原型图
		
		设计师   → 设计稿			   → 根据某一种风格设计设计稿
		
		设计稿	 → 前端页面的开发     → 根据某一种风格设计页面
		
		
		三个岗位根据同一个风格进行设计、开发，沟通没有任何障碍的
		
		
	桌面端组件库 ？
	
		PC 里面的
		
		
	
	常见的 桌面端组件库 有哪些  ？		
	
		Element\Element Plus、iview、Ant Design of Vue
		
		
	常见的 移动端组件库 有哪些  ？
	
		Vant、NutUI、SUI、Mui
		
		
	如何去选择 UI 组件库 ？
	
		1. 先看场景
		
			PC 端、移动端

		2. 看 github 点赞数或者看 npm 下载量
		 
		   使用人数比较多，遇到问题好解决
		   
		   
		3. 团队
		
			如果是个人开发的，以后有可能会出现不维护的情况
			
			如果大型的团队开发，一般很少出现不维护的情况
			
		4. 看社区是否繁荣
		
			使用人数比较多，遇到问题好解决
			
			
			
	10. Element-基本使用
	
		
		① 安装
		
		② 导入 Element
		
		③ CV 对应的结构
		
		
	
	11. Element-按需引入
	
		① 安装 babel 插件
		
		② 配置 babel
		
		③ 按需导入文件的名字
		
		
		
	
	12. Element-弹框
	
		如果是对 element 进行的全局引入，Element 会自动给 Vue.prototype 添加了全局方法 $message
		
		this.$message('xxxx')
		
		
		
		
		如果是按需引入，手动给  Vue.prototype 添加了全局方法 $message
		
		
		① 先将组件按需引入
		
		② 自己手动  Vue.prototype 添加了全局方法 $message
		
		③ this.$message
		
		
		
	
	12. 注册静态结构 和 数据初始化
	
	
		静态结构直接 c v
		
		数据的初始化需要按照接口文档来进行声明，以后可以直接拿初始化的数据交给接口调用即可
	
	
	
	13. 获取验证码
	
		目前项目中并不能给手机发送验证码
		
			① 收费
			
			② 政策不允许应用频繁的发送短信 ....
			
		验证码是通过接口返回的！
		
		但是 ！ 和实际开发是一样的 ！
		
		以后在开发中，也是输入手机号，点击获取验证码，需要将手机号通过接口发送给服务器
		
		服务器调用第三方的接口、服务，将验证码发送给用户。
		
		以后在开发中，给用户发短信也是后端做的，不是前端搞的！
		
		
		① 根据接口文档封装 API
		
		② 组件中导入
		
		③ 点击获取验证码的时候进行调用
		
		
		
		
	14. 注册-完成注册
	
	
		
		① 根据接口文档封装 API
		
		② 组件中导入
		
		③ 点击获取验证码的时候进行调用
		
		
		注册验证，如果自己写，非常麻烦、非常痛苦，后面使用一个专门对 Vue 项目进行表单验证的库进行实现
		注册验证，如果自己写，非常麻烦、非常痛苦，后面使用一个专门对 Vue 项目进行表单验证的库进行实现