

	早上复习：
	
	
	今日目标：
	
		
		1. 退出功能
		
		2. 交易路由
		
		3. 支付功能
		
			发起支付
			
			支付成功
			
		4. 我的订单
		
		5. 路由懒加载
		
		6. 表单验证
		
		7. 图片懒加载
	
	
	解决两个 Bug:
	
		1. 之前讲过，购物车为空的时候，页面会报错
		
			// 判断购物车列表是否有数据
			if (res.data[0]) {
			  this.cartList = res.data[0].cartInfoList
			}
		
		
		2. 代码的顺序问题
		
			在 login 组件中，发起登录以后，
			
			需要【先】将 token 存储到本地，【然后】在进行跳转
			
			只要将 token 存到本地了，本身有 token 了，跳转到其他页面的时候
			
			走前置导航守卫，才能先获取 token，如果获取不到，肯定 走 else
	
	
	课程内容：
	
	
	3. 展示用户信息
	
		需要根据数据展示用户信息，但是用户信息在 Vuex 中
		
		所以在当前组件需要先将数据从 Vuex 中取出，取出以后在进行渲染
		
		v-show 
		
		v-if ... v-else
		
		
		
	4. 退出登录
	
		可以创建一个 actions ，在 actions 中进行以下 4 步的处理
	
		① 发送接口，通知服务器将 token 可以设置为失效
		
		② 删除本地 token
		
		③ 需要清空用户的信息 (用户信息、收货地址.....)
		
		④ 跳转到登录页面
		
		
		
	5. 交易路由-静态页面构建
	
	
		① 复制组件
		
		② 配置路由
		
		
	6. 交易路由-鉴权
	
		如果用户没有登录，禁止用户进行结算
		
		虽然购物车中有数据，但是这个数据是依靠临时标识 UserTempId 来进行添加的
		
		如果访问了一个需要登录后才能访问的路由，就需要【鉴权】处理
		
		
		------
		
		① 先声明一个数组，数组中存放的是登录后才能访问的路由地址 → 登录后有权访问的路由数组
		
		② 在全局前置守卫中进行判断，如何用户访问的路由在 权限路由数组中，让用户跳转到登录页面，
		
		
		
	7. 交易路由-获取数据
	
	
		需要获取交易页面的数据信息，后端给提供了两个接口
		
		收货地址接口：返回的数据是空，所以咱们使用 Mock，接口文档我已经准备好假数据，直接复制即可
		
		需要购买的商品接口：按照后端接口文档进行封装即可
		
		
		① 封装 API
		
		② 在交易页面进行导入 API
		
		③ 先声明方法，调用 API
		
		④ 在钩子函数中，调用声明的方法，获取数据即可
		
		
		
	8. 交易路由-展示页面信息
	
		直接使用服务器返回的数据渲染页面即可
		
		v-for
		
		
		
	9. 交易路由-拦截器处理身份过期
	
	
		问题
	
		如果在 Token 过期的时候，访问一个接口，接口会报错 (业务状态码出现问题，返回的是 208)
		
		如果是 Token 过期了，需要让用户重新登录
		
		
		------------
		
		在哪里处理  Token 过期 ？ 响应拦截中进行处理
		
		需要怎么处理 ？ 删除过期Token、删除用户信息、跳转到登录页面......
		
			logout action



	10. 交易路由-切换地址
	
		本身加样式、兄弟组件去除样式，典型的排他思想
		
		----------------
		
		点击切换地址，只是将地址进行改变，而不是切换默认地址
		
		因为数据是使用 Mock 模拟后端返回的数据，
		
		isDefault 只是代表当前是否是默认地址 ！ 如果是默认地址需要始终展示那一项
		
		打开结算页面，看到的都是默认的地址，而不是上次选择的那个地址
		
		--------------
		
		这时候需要继续思考 ？ 
		
		注意：咱们是模拟的数据，出现了，这些参数是前端和后端协商定义好，或者是后端先写好的接口文档
		
			 有可能存在错误请求，
			 
	    记住：如果以后，在开发中按照接口文档模拟的数据，发现数据不对，或者丢失了数据，可以找后端【确认】，然后进行添加！
		
		
		有可能是后端问题，也有可能不是后端问题，先进行分析 ！ 然后在找后端进行确认 ！

		isChecked = '1'
		
		
		直接借助索引将功能实现即可
		
		
		
	11. 提交订单-收集必备参数
	
		在交易页面只是让用户确认自己的收货地址、需要购买的商品 
		
		只有点击提交订单，才能够进入支付页面 ....
		
		-------------
		
		根据接口文档准备参数
		
		
	12. 提交订单-准备支付静态页面
	
	
		单纯的准备路由和组件
		
		将模板替换即可(从笔记中拷贝)
		
		
		
	13. 提交订单-提交订单并跳到支付页面
	
	
		① 看接口文档 (地址、方式、参数)，封装 API
		
		
		② 在对应的组件中将 API 进行导入
		
		
		③ 在点击提交订单后调用 API
		
		
		
	14. 发起支付-获取支付信息
	
	
		从交易页面，进行提交订单，已经进入支付页面了 ！
		
		---------------------
		
		所以在支付页面，就获取支付页面接口需要的相关信息、参数，(以后开发中看接口文档、需求文档)
		
		在获取相关信息以后，为发起支付做准备即可 ！！
		
		
		--------------------
		
		经过接口文档分析，只需要一个参数：订单交易 ID 
		
		但是这个 ID 是通过提交订单接口返回的，
		
		所以需要将提交订单成功后返回的 订单交易 ID  通过路由传参传递到 /pay 路由中
		
		
		-----------------------
		
		
		① 看接口文档 (地址、方式、参数)，封装 API
		
		
		② 在对应的组件中将 API 进行导入
		
		
		③ 创建一个方法，调用 API
		
		
		④ 在 钩子函数中，调用方法，获取相关的支付信息即可 
		
		
		
		
	15. 支付-支付弹框
	
	
	
		this.$alert('弹框内容', '弹框标题', '弹框配置项')
		
		
	16. 发起支付-生成支付生成二维码
	
	
		服务器返回的是支付的链接，因此我们需要将支付的链接转换成支付二维码

		如果想将二维码转换为图片，需要借助 qrcode 插件
		
		------------------
		
		插件提供了一个方法：QRCode.toDataURL
		
		toDataURL 能够将文字、链接转换成二维码
		
		QRCode.toDataURL 返回的是 Promise
		
		所以如果想接收 QRCode.toDataURL 方法返回的图片，需要使用 await/async、.then/.catch




	17. 发起支付-心跳请求与支付
	
		心跳请求说白了，就是使用定时器轮询进行接口(验证是否请求成功的接口)的请求
	
	
		首先支付二维码已经生成，此时可以扫码进行支付。。。
		
		所以需要调用一个接口，实时判断微信支付支付完成
		
		接口就能返回支付的状态，然后根据返回的状态进行逻辑功能处理
		
		
		------------
		
		① 写定时器
		
		② 在定时器中请求接口，验证是否真的支付成功
		
		③ 处理支付成功以后的逻辑
		
		
		
	18 - 发起支付-弹窗按钮逻辑
	
	
		点击 【支付遇到问题】 或者【支付完成】，只要点击，弹框就需要关闭
		
		弹框关闭了要么是支付成功了，要么失败了，这时候都需要将 定时器 （心跳请求）清掉
		
		----------------
		
		点击 【支付遇到问题】
		
			关闭弹框
			
			关掉定时器
			
			告诉用户，支付有问题，联系客服。。。。。。
			
			
		点击 【支付完成】
		
			再次发请求确认用户是否真的支付完成 ！
		
				支付成功
			
					关闭弹框
				
					关掉定时器
				
					告诉用户
					
				支付失败
				
					让用户重新点击进行支付
					
					
					
	
	
	19. 我的订单-渲染订单列表
	
	
	
		① 看接口文档 (地址、方式、参数)，封装 API
		
		② 在对应的组件中将 API 进行导入
		
		③ 创建一个方法，调用 API
		
		④ 在 钩子函数中，调用方法，获取相关的支付信息即可 
		
		
		
	20 我的订单-渲染订单列表
	
	
		① 如果同时购买多个商品，这些商品属于同一个订单 
		
		② 如果购买多少商品，收货地址、收货人只能是一个
		
		③ 页面结构：
		
			- 第 1 列：渲染购买的商品
			
			- 第 2 列以后：是当前订单共有的信息