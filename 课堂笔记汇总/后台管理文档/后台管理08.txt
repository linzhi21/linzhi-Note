一、scoped的作用及深度作用选择器（面试点）

scoped的作用
	scoped本意是作用域的意思，在style身上添加scoped是在限制这个style的样式作用域

	如果style当中没有添加scoped，那么内部所写的样式会影响其它组件
		如果其它组件当中也有和这个组件一样的选择器，那么选中的元素也会被影响到（整个页面）

	如果style当中添加scoped，那么内部所写的样式被限定了作用域
		在style当中添加了scoped会让样式作用域被限定在本组件内部和子组件的根标签
		如果子组件的根标签和样式的选择器一样，那么也能被影响到

原理是什么（怎么做到的）
	如果style添加scoped，那么它是靠添加标识数据来限定作用域的
	添加了scoped，本组件的所有元素以及子组件的跟标签，最后解析完都会添加一个data-v-xxxx
	的一个标识数据，只要有这个标识数据，就代表样式，可以影响到这些区域

	虽然这样能确定style当中的样式会影响到哪，但是还要保证元素的选择器是正确的，才能生效


	总结：想让一个元素有样式必须符合两个条件

	1、scoped能够作用到，也就是添加标识数据
	2、样式的选择器必须能选择到




	具体实现其实就是用css选择器来限定样式，把标识数据作为元素的一个特殊属性
	如果不添加scoped，样式最终是
	h2:{
		color:hotpink
	}

	如果加了scoped，样式最终是

	h2[data-v-38fc2d66] {
	    color: hotpink;
	}



有些组件标签添加样式就可以生效，有些组件添加样式就不能生效
	生效的样式，我们样式的作用域一定是作用到了       恰好选择器选中的就是组件的根标签
	没生效的样式，我们样式的作用域一定是没作用到     选择器选中的根本不是组件的根标签，而是子组件根标签内部的元素



如何解决？
	1、把不生效的样式不加scoped，重新写一个style
		样式是没有作用域限定的，也就是说子组件里面不管什么元素，只要选择器符合就可以生效

		一般使用的比较少，因为在使用的时候需要限定区域，不能让整个页面所有相关的元素，全部改变

	2、在加scoped的style中使用深度作用选择器 ***************************************
		让选择器发生改变，继续往子组件根标签内部的元素身上去选

		深度作用选择器，在vue2当中去使用的时候和vue3当中使用的时候是不一样de

		vue3中，我们需要用 :deep(需要的样式选择器)

		vue2中：
			采用在需要的选择器前面  ::v-deep

		原生的写法：要用父元素选择器  >>> 需要的选择器    一般不用


        深度作用选择器最终也是通过改变样式选择器来达到目标的

        	如果加了scoped没有使用深度作用选择器，那么我们的样式

        		h2[data-v-38fc2d66] {
				    color: hotpink;
				}

			如果加了scoped也使用了深度作用选择器，那么我们的样式

				[data-v-38fc2d66] h2 {
				    color: hotpink;
				}

			一句话，如果不用深度选择器，那么标识数据属性选择器是在最右边的，和自己的选择器组成交集选择器，就选择不到
			       如果使用深度选择器，那么标识数据属性选择器是在左边的，和自己的选择器组成后代选择器，就可以被选择到



二、权限管理

	权限管理包括权限数据管理（后面）和权限控制两部分

	权限控制又包含路由权限（菜单权限）控制***** 和 按钮权限控制（后面）

	菜单权限控制的目的是让不同的用户登录成功看到的菜单是不一样的





	菜单权限控制流程 **************************************************************
		1、菜单的显示是根据注册的路由遍历而来的
		2、不同的用户要显示不同的菜单，那么也就是说不同的用户登录后路由注册是不一样的
		3、不同的用户登录的时候，需要给我携带不同的路由相关的权限信息数据，为了让我们可以根据
		不同的权限信息数据，来决定注册不同的路由
		4、不同的用户登录，注册的路由不一样，那么我们之前的路由是不能用的，因为已经写死了
		导致目前不管是什么用户，携带的是什么路由权限信息，最终看到的都是一样的菜单




		5、既然路由写死是不能用，那么我们就要把路由给修改为三大类路由
			常量路由（静态路由）： 所有的用户都可以看到的菜单路由
			异步路由（动态路由）： 根据用户登录返回的路由权限信息决定动态注册的路由
			任意路由（最终返回404）：这个路由是用户随意输入路径的时候要匹配的，最终重定向到404
								这个路由在注册的时候，必须是注册在最后一个


		6、用户登录成功的时候，除了name和avatar以外的其余三个数组数据：buttons,roles,routes，对应的
		 就是我们要的权限信息数据，其中routes就是不同用户给我们的不同动态路由相关的信息，routes本质是
		 字符串数组，这里面的字符串是和当年我们配路由的时候的name值对应的


		7、用户登录成功获取到用户信息的时候，我们需要使用这个用户对应的路由权限信息数据routes，
		从我们配的动态路由数组当中，过滤出当前这个用户所需要注册到路由器里面的路由数组


		8、我们需要把用户过滤出来的自己的动态路由，通过路由器的api addRoute动态的添加注册到路由器


		9、我们还需要根据注册的动态路由构造菜单遍历的时候需要的路由数组，让侧边栏动态生成菜单

		

一组组长： 曹博  齐
二组组长： 葛猇飞 齐
三组组长： 吴颖
四组组长： 曹凯  齐
五组组长： 赵重阳 齐
六组组长： 吕全志  齐
七组组长： 杜茹月  齐
八组组长： 王明磊 齐